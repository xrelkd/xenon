name: Release

on:
  push:
    tags:
      - "v*"
    branches:
      - ci/*
      - release/*

env:
  CI: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: image-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  image:
    name: Build and publish image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mode:
          - release
    outputs:
      version: ${{ steps.meta.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Install docker-buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Login to the GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup container metadata
        id: meta-scratch
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=edge
            type=raw,enable=${{ github.event_name != 'pull_request' && !contains(github.ref, 'refs/tags/') }},value=build-{{date 'YYYY.MM.DD'}}-{{sha}}
          flavor: |
            latest=auto
          bake-target: xenon

      - name: Setup container metadata
        id: meta-distroless
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=edge
            type=raw,enable=${{ github.event_name != 'pull_request' && !contains(github.ref, 'refs/tags/') }},value=build-{{date 'YYYY.MM.DD'}}-{{sha}}
          flavor: |
            latest=auto
            suffix=-distroless
          bake-target: xenon-distroless

      - name: Merge container metadata
        run: |
          jq 'reduce inputs as $in (.; . * $in)' \
            ${{ steps.meta-scratch.outputs.bake-file }} \
            ${{ steps.meta-distroless.outputs.bake-file }} > /tmp/bake-metadata.json

      - name: Build container image
        uses: docker/bake-action@v3
        with:
          pull: true
          push: true
          files: |
            ./dev-support/containers/docker-bake.hcl
            /tmp/bake-metadata.json

      - name: Clean container metadata
        run: |
          rm /tmp/bake-metadata.json

  program:
    name: Build and release program

    strategy:
      matrix:
        target:
          - aarch64-apple-darwin
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-musl

        include:
          - target: aarch64-apple-darwin
            os: macos-latest
            target_rustflags: "--codegen target-feature=+crt-static"

          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross_compiling: true
            target_rustflags: "--codegen linker=aarch64-linux-gnu-gcc"

          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross_compiling: true
            target_rustflags: "--codegen linker=arm-linux-gnueabihf-gcc"

          - target: x86_64-apple-darwin
            os: macos-latest
            cross_compiling: false
            target_rustflags: "--codegen target-feature=+crt-static"

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross_compiling: false
            target_rustflags: "--codegen target-feature=+crt-static"

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross_compiling: false
            target_rustflags: "--codegen target-feature=+crt-static"

    runs-on: ${{matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Install needed Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo ./dev-support/bin/install-deps

      - name: Install needed macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          ./dev-support/bin/install-deps

      - name: Install Rust Toolchain Components
        uses: actions-rs/toolchain@v1
        with:
          override: true
          target: ${{ matrix.target }}
          toolchain: stable

      - name: Install AArch64 Toolchain
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get install gcc-aarch64-linux-gnu

      - name: Install ARM7 Toolchain
        if: ${{ matrix.target == 'armv7-unknown-linux-gnueabihf' }}
        run: |
          sudo apt-get install gcc-arm-linux-gnueabihf

      - name: Install Musl
        if: ${{ matrix.target == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install musl-tools

      - name: Create Package
        id: package
        env:
          TARGET: ${{ matrix.target }}
          REF: ${{ github.ref }}
          OS: ${{ matrix.os }}
          TARGET_RUSTFLAGS: ${{ matrix.target_rustflags }}
        run: ./dev-support/bin/create-package
        shell: bash

      - name: Publish Archive
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          draft: false
          files: ${{ steps.package.outputs.archive }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
